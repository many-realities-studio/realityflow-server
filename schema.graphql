# Creating a custom scalar for representing time.
scalar DateTime
scalar JSON

type Query {
  behaviour: [behaviour!]!
  user: [user!]!
  project: [project!]!
  object: [db_object!]!
}

type Mutation {
  createBehaviour(Id: String!, TypeOfTrigger: String!, TriggerObjectId: String!, TargetObjectId: String!,
                  ProjectId: String!, NextBehaviour: String!, Action: JSON!): behaviour!

  updateBehaviour(Id: String!, TypeOfTrigger: String, TriggerObjectId: String, TargetObjectId: String,
                  ProjectId: String, NextBehaviour: String, Action: String): behaviour!

  deleteBehaviour(Id: String!): behaviour!
  
# createUser(Username: String!, Password: String!, input:[ProjectInput]): user!
  createUser(Username: String!, Password: String!): user!
  updateUser(Username: String, Password: String): user!
  deleteUser(Username: String!): user!

  createProject(Id: String!, ProjectName: String!, Description: String!, ownerUsername: String!): project!
  updateProject(Id: String!, ProjectName: String, Description: String, DateModified: DateTime, ownerUsername: String): project! 
  deleteProject(Id: String!): project!

  createObject(Id: String!, Name: String!, X: Float!, Y: Float!, Z: Float!, Q_x: Float!, Q_y: Float!, Q_z: Float!
                Q_w: Float!, S_x: Float!, S_y: Float!, S_z: Float!, R: Float!, G: Float!, B: Float!
                A: Float!, Prefab: String!, projectId: String!): db_object!

  updateObject(Id: String! Name: String, X: Float, Y: Float, Z: Float, Q_x: Float, Q_y: Float, Q_z: Float
                Q_w: Float, S_x: Float, S_y: Float, S_z: Float, R: Float, G: Float, B: Float, A: Float,
                Prefab: String, projectId: String, username: String): db_object!

  deleteObject(Id: String!, projectId: String!): db_object!

  createVSGraph(Id: String!, Name: String!, serializedNodes: String!, edges: String!, groups: String!,
                stackNodes: String!, pinnedElements: String!, exposedParameters: String!, stickyNotes: String!
                position: String!, scale: String!, references: String!, projectId: String!): vs_graph!

  updateVSGraph(Id: String!, Name: String, serializedNodes: String, edges: String, groups: String,
                stackNodes: String, pinnedElements: String, exposedParameters: String, stickyNotes: String
                position: String, scale: String, references: String, projectId: String): vs_graph!

  deleteVSGraph(Id: String!): vs_graph!
}

# Inputs
input UserInput {
  id: ID
  Username: String
  Password: String
  project: [ProjectInput] 
}

input ProjectInput {
    Description: String!
    ProjectName: String!
    DateModified: DateTime
    User: UserInput
}

# Object definitions
type behaviour {
  Id: String!
  TypeOfTrigger: String!
  TriggerObjectId: String!
  TargetObjectId: String!
  ProjectId: String!
  NextBehaviour: String!
  Action: JSON!
}

type user{
  Username: String!
  Password: String!
  #project: [project!]
}

type project{
    # Actual Data Fields
    Id: String!
    Description: String!
    DateModified: DateTime
    ProjectName: String!
    ownerUsername: String
    db_object: [db_object!]####
    # Relational Fields
    user: user!
}

type db_object{
  id: Int!
  Id: String!
  Name: String!
  X: Float!
  Y: Float!
  Z: Float!
  Q_x: Float!
  Q_y: Float!
  Q_z: Float!
  Q_w: Float!
  S_x: Float!
  S_y: Float!
  S_z: Float!
  R: Float!
  G: Float!
  B: Float!
  A: Float!
  Prefab: String!
  project: project!
  # Relational Field
  projectId: String!
  username: String! 
}

type vs_graph {
  id:                Int!
  Id:                String!
  Name:              String!
  serializedNodes:   String!
  edges:             String!
  groups:            String!
  stackNodes:        String!
  pinnedElements:    String!
  exposedParameters: String!
  stickyNotes:       String!
  position:          String!
  scale:             String!
  references:        String!
  projectId:         String!
  project:           project!
}